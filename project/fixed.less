@import 'stylesheets/config.less';

// Uncomment the definition below for a percentage-based layout
@total-width: 100%;

////////////
// LAYOUT //
////////////
body {
	.widths(300px, 100%); // makes the min-width of the body 300px and the max-width 100%. Note min-width won't have any effect as a percentage for obvious reasons.
}

// Fixed Element specific css

html, body {
	height: 100%;
	margin: 0;
}

.page {
	.grid();
	height: 100%; 
	overflow: auto; 
}

.scroll-container {
	margin-bottom: @rhythmic-unit*4; 
	margin-top: @rhythmic-unit*3; 
}

header, footer {
	background-color: white;
	width: 100%;
	z-index: 1030;
	position: fixed;
}

header {
	top: 0; 
	height: @rhythmic-unit*3;
	box-shadow: 0 0 5px 5px #888;
	opacity:0.95;
}

footer {
	bottom: 0;
	height: @rhythmic-unit*4;
	box-shadow: 0 0 5px 5px #888;
	opacity:0.95;
}

section {
	.column(12);
}

// End of Fixed Element specific css

.first {
	.column(6);
}
.second {
	.column(6);
}

.alpha {
	.column(1);
}
.beta {
	.column(11,12);
}
.gamma {
	.column(2);
}
.delta {
	.column(10,12);
}
.epsilon {
	.column(3);
}
.zeta {
	.column(9,12);
}
.eta {
	.column(4);
}
.theta {
	.column(8,12);
}
.iota {
	.column(5);
}
.kappa {
	.column(7,12);
}
.lambda {
	.column(4);
}
.mu {
.column(2);
}
.nu {
	.column(6,12);
}

.push-example {
	.column(6);
	.push(3,12);
}

.nested1 {
	.column(2)
}
.nested2 {
	.column(2);
	.col-equal();
}
.nested3 {
	.column(8);
	.col-equal();
	aside {
		.column(4,8);
	}
	article {
		.column(4,8);
	}
}

.first-row {
	.row(12);
}
	
.second-row {
	.row(8);
}

.intro {
	.column(12);	
}

.box {
	.column(3,12);
}

// media queries for responsive design (percentage based). We only have to define the grid elements that break at set points. Note each grid will have different break points and if you use the default values below it is likely that you are doing something wrong.
// First Media Query for Screens smaller than 960px
@media screen and (max-width: 960px) {
	.first {
		.column(6);
	}
	.second {
		.column(6);
	}

	.alpha {
		.column(1);
	}
	.beta {
		.column(11,12);
	}
	.gamma {
		.column(2);
	}
	.delta {
		.column(10,12);
	}
	.epsilon {
		.column(3);
	}
	.zeta {
		.column(9,12);
	}
	.eta {
		.column(4);
	}
	.theta {
		.column(8,12);
	}
	.iota {
		.column(5);
	}
	.kappa {
		.column(7,12);
	}
	.lambda {
		.column(4);
	}
	.mu {
	.column(2);
	}
	.nu {
		.column(6);
	}

	.push-example {
		.column(6);
		.push(3,12);
	}

	.nested1 {
		.column(6)
	}
	.nested2 {
		.column(6);
		.col-equal-remove(); // remove the equal column
		#rhythmless > .rhythm-margin-bottom(1); // after the .col-equl-remove has set the margin to 0px we set it to our vertical rhythm
	}
	.nested3 {
		.column(12);
		.col-equal-remove(); // remove the equal column
		#rhythmless > .rhythm-margin-bottom(1); // after the .col-equl-remove has set the margin to 0px we set it to our vertical rhythm
		.col-equal();
		aside {
			.column(6);
		}
		article {
			.column(6);
		}
	}

	.second-row {
		.row(6);
	}
		.box {
			.column(6,12);
		}
	}

// Second Media Query for Screens smaller than 480px
@media screen and (max-width: 480px) {
	.first {
		.column(12);
	}
	.second {
		.column(12);
	}

	.alpha {
		.column(12);
	}
	.beta {
		.column(12);
	}
	.gamma {
		.column(12);
	}
	.delta {
		.column(12);
	}
	.epsilon {
		.column(12);
	}
	.zeta {
		.column(12);
	}
	.eta {
		.column(12);
	}
	.theta {
		.column(12);
	}
	.iota {
		.column(12);
	}
	.kappa {
		.column(12);
	}
	.lambda {
		.column(12);
	}
	.mu {
	.column(12);
	}
	.nu {
		.column(12);
	}

	.push-example {
		.column(12);
	}

		.nested1 {
			.column(12)
		}
		.nested2 {
			.column(12);
		}
		.nested3 {
			.column(12);
			.col-equal();
			aside {
				.column(12);
			}
			article {
				.column(12);
			}
		}
	

	.second-row {
		.row(12);
	}

	.box {
		.column(12);
	}
}